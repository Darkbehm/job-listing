// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Job {
    id           Int            @id @default(autoincrement())
    company      String
    logo         String
    new          Boolean
    featured     Boolean
    position     String
    role         String
    level        String
    postedAt     String
    contract     String
    location     String
    JobLanguages JobLanguages[]
    JobTools     JobTools[]
}

model JobLanguages {
    id     Int       @id @default(autoincrement())
    jobId  Int
    langId Int
    job    Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
    lang   Languages @relation(fields: [langId], references: [id], onDelete: Cascade)
}

model Languages {
    id           Int            @id @default(autoincrement())
    name         String
    JobLanguages JobLanguages[]
}

model JobTools {
    id     Int   @id @default(autoincrement())
    jobId  Int
    toolId Int
    job    Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
    tool   Tools @relation(fields: [toolId], references: [id], onDelete: Cascade)
}

model Tools {
    id       Int        @id @default(autoincrement())
    name     String
    JobTools JobTools[]
}

// ==================================
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
